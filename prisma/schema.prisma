generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model guest {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id              String   @db.Uuid
  appointment_bookings String?  @db.VarChar(255)
  insurance_plan       String?  @db.VarChar(255)
  created_at           DateTime @default(now()) @db.Timestamp(6)
  updated_at           DateTime @default(now()) @db.Timestamp(6)
  user                 user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model healthcare_provider {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String   @db.Uuid
  appointment_slots String?  @db.VarChar(255)
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @default(now()) @db.Timestamp(6)
  user              user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model insurance_provider {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String   @db.Uuid
  insurance_plans String?  @db.VarChar(255)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  user            user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model medicine_staff {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id              String   @db.Uuid
  patient_profiles     String?  @db.VarChar(255)
  appointment_bookings String?  @db.VarChar(255)
  created_at           DateTime @default(now()) @db.Timestamp(6)
  updated_at           DateTime @default(now()) @db.Timestamp(6)
  user                 user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email               String                @unique @db.VarChar(255)
  firstName           String?               @db.VarChar(255)
  lastName            String?               @db.VarChar(255)
  roq_user_id         String                @db.VarChar(255)
  tenant_id           String                @db.VarChar(255)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  guest               guest[]
  healthcare_provider healthcare_provider[]
  insurance_provider  insurance_provider[]
  medicine_staff      medicine_staff[]
  organization        organization[]
}
